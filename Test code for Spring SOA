1. Create a field on Account named "Number of Contacts". Populate this field with the number of contacts related to an account. 

Solution :
 Steps to create the field in Account 
  1) go to setup --> Object manager --> Account --> Field and relationship --> create new field --> Name : 'Number of Contacts' , Data type :'Number'
  
  Apex trigger:
  
  trigger CountContact on Account (after insert , after update) 
{
AccountProcessor.countContacts(Trigger.new);
  }
  
  
Apex Class :
  
  public Without Sharing  class AccountProcessor {
   
    public static void countContacts(List<Account> acc){
       
        List<Account> accupdate = new List<Account>();
        for(Account acct :acc){
            List<Contact> con =[Select Name,Id from Contact where AccountId =: acct.id];
            acct.Number_of_Contacts__c=con.size();
            accupdate.add(acct);
        }
        update accupdate;
    }
}

---------------------------------------------------------***********************************---------------------------------------------------------------------------------------------------------------------------------------------

2) Build a basic lightning component that can query a list of 10 most recently created accounts and display it using a lightning app. 

Lighting component : DisplayAccountInfo.cmp

<aura:component  controller="GetAccounts" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" access="global" >
	<aura:attribute name="data" type="Object"/>
    <aura:attribute name="columns" type="List"/>
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
	
	
	 <div style="height: 300px">
        <lightning:datatable
                keyField="id"
                data="{! v.data }"
                columns="{! v.columns }"
                hideCheckboxColumn="true"/>
    </div>
	
    
</aura:component>
-------------------------------

DisplayAccountInfoContoller.js:

({
	doInit: function(component, event, helper) {
	
	 component.set('v.columns', [
            {label: 'Account name', fieldName: 'Name', type: 'text'},
            {label: 'Account number', fieldName: 'AccountNumber', type: 'text'},
            {label: 'Account Owner', fieldName: 'OwnerId', type: 'text'},
            {label: 'Industry', fieldName: 'Industry', type: 'text'},
            
        ]);
		helper.getaccount(component, event, helper);
	}
})
	
---------------------------------------
DisplayAccountInfoHelper.js

({
	 getaccount:function(component,event,helper){
 
 var action = component.get("c.GetAccountInfo");
 action.setParams({ 
          
        });
		
		 action.setCallback(this, function(c) {
            var state= c.getState();
            if(state==='SUCCESS'){
                var response=c.getReturnValue();
                if(response!=null){
                    
                    for (var i = 0; i < response.length; i++) {
                            var rec = response[i];
                            
                           rec.OwnerId=rec.Owner.Name;
                    }
                    component.set("v.data",response);
                    
                }
                else{
                      var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "title": "Error in Account fetching",
                    "message": "No Account Information present , Please contact System Adimstrator ",
                    "type":"error",
                    "mode":"sticky"
                });
                toastEvent.fire();
                    
                }
            }
            else{
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "title": "Error in Account",
                    "message": "Unable to fetch Account Information, Please contact System Adimstrator ",
                    "type":"error",
                    "mode":"sticky"
                });
                toastEvent.fire();
            }
        });
        
        $A.enqueueAction(action);
 
 }
})

-------------------------------------------------------------------------

Apex class :
GetAccounts.apxc

public class GetAccounts {
 @AuraEnabled
    public static LIST<Account> GetAccountInfo(){
        List<Account> acc = new List<Account>();
        acc=[SELECT AccountNumber,Id,Industry,LastModifiedDate,Name,Owner.Name FROM Account ORDER BY LastModifiedDate ASC NULLS FIRST LIMIT 10  ];
        return acc;
        
    }
}

---------------------------------------------------------------------------

App:
AccountDisplay.app

<aura:application  extends="force:slds" >
	<c:AccountDisplay /> 
</aura:application>

-------------------------------------------------***********************************************--------------------------------------------------------------------

 3. Make a basic http callout and print the result using system.debug

https://postman-echo.com/get?foo1=bar1&foo2=bar2 ( add this URL to your remote site setting first )



Apex class:

public class TestCallout {
public static void Callout(){
    HttpRequest req = new HttpRequest();
req.setEndpoint('https://postman-echo.com/get?foo1=bar1&foo2=bar2');
req.setMethod('GET');
Http http = new Http();
HTTPResponse res = http.send(req);
System.debug(res.getBody());
}
}
